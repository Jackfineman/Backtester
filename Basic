<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Backtest App</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-kenU1KFdBIe4zVF0s0G1M5b4hcpxyD9F7jL+jjXkk+Q2h455rYXK/7HAuoJl+0I4" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/moment@2.29.1/moment.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        body {
            padding: 20px;
        }
        .chart-container {
            width: 80%;
            margin: 0 auto;
        }
    </style>
</head>
<body>
    <h1>Backtest App</h1>
    <select id="coin-select" class="form-select">
        <option value="bitcoin">BTC</option>
        <option value="ethereum">ETH</option>
    </select>
    <select id="time-frame-select" class="form-select">
        <option value="1">1 Day</option>
        <option value="7">7 Days</option>
        <option value="30">30 Days</option>
        <option value="183">6 Months</option>
        <option value="365">1 Year</option>
    </select>
    <div class="chart-container">
        <canvas id="chart"></canvas>
    </div>
    <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#backtest-modal">
        View Backtest Results
    </button>
    <div class="modal fade" id="backtest-modal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Backtest Results</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p id="backtest-results"></p>
                </div>
            </div>
        </div>
    </div>
    <script>
        const coinSelect = document.getElementById('coin-select');
        const timeFrameSelect = document.getElementById('time-frame-select');
        const chart = document.getElementById('chart').getContext('2d');
        const backtestModal = document.getElementById('backtest-modal');
        const backtestResults = document.getElementById('backtest-results');

        let chartInstance;

        const fetchHistoricalData = async (coin, days) => {
            const response = await fetch(`https://api.coingecko.com/api/v3/coins/${coin}/market_chart?vs_currency=usd&days=${days}`);
            const data = await response.json();
            return data.prices;
        };

        const drawChart = (data) => {
            if (chartInstance) {
                chartInstance.destroy();
            }

            const labels = data.map(([timestamp]) => {
                const date = moment(timestamp);
                if (timeFrameSelect.value === "1") {
                    return date.format('HH:mm');
                } else if (timeFrameSelect.value === "7" || timeFrameSelect.value === "30") {
                    return date.format('MMM D');
                } else {
                    return date.format('MMM YYYY');
                }
            });

            chartInstance = new Chart(chart, {
                type: 'line',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'Price',
                        data: data.map(([_, price]) => price),
                        borderColor: 'rgb(75, 192, 192)',
                        tension: 0.1
                    }]
                },
                options: {
                    plugins: {
                        legend: {
                            display: true
                        }
                    },
                    scales: {
                        x: {
                            ticks: {
                                autoSkip: true,
                                maxTicksLimit: 12,
                                maxRotation: 45,
                                minRotation: 45
                            }
                        }
                    }
                }
            });
        };

        const calculateBacktestResults = (data) => {
            const initialPrice = data[0][1];
            const finalPrice = data[data.length - 1][1];
            const profit = (finalPrice - initialPrice) / initialPrice * 100;
            return `Profit: ${profit.toFixed(2)}%`;
        };

        const updateChart = async () => {
            const coin = coinSelect.value;
            const days = timeFrameSelect.value;
            const data = await fetchHistoricalData(coin, days);
            drawChart(data);
            backtestResults.innerText = calculateBacktestResults(data);
        };

        coinSelect.addEventListener('change', updateChart);
        timeFrameSelect.addEventListener('change', updateChart);

        updateChart();
    </script>
</body>
</html>
